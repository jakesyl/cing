"""
CING: Common Interface for NMR structure Generation

Directories:

core                    CING API basics
Database                Nomenclature database files
Libs                    Library functionality including fast c code for cython.
PluginCode              Application specific code for e.g. validation programs.
Scripts                 Loose pieces of python CING code.
STAR                    Python API to STAR.
Talos                   Contains the Talos data.

Files:

CONTENTS.txt            File with directory and file description.
constants.py            File with constants definitions
definitions.py          File with cing and system definitions
localConstants.py       Settings that can be imported from python/cing/definitions.py
                        NB this file is absent from svn. An example can be adapted
main.py                 The CING program.
setupCing.py            Run to set up environment variables and check installation.
valSets.cfg             Validation settings. Might be moved around.

"""
#-----------------------------------------------------------------------------
# Imports
#-----------------------------------------------------------------------------

#import os
#import sys

#import cing.Libs.helper as helper
#import cing.Libs.disk as disk
from cing import constants
import cing.definitions as cdefs

#-----------------------------------------------------------------------------
# pydoc settings
#-----------------------------------------------------------------------------
__version__         = cdefs.__version__
__revision__        = '$Revision$'
__date__            = '$Date$'
__copyright_years__ = cdefs.__copyright_years__
__author__          = '$Author$'
__copyright__       = cdefs.__copyright__
__credits__         = cdefs.__credits__

#-----------------------------------------------------------------------------
# Verbosity
#-----------------------------------------------------------------------------
verbosityNothing    = cdefs.verbosityNothing # Even errors will be suppressed
verbosityError      = cdefs.verbosityError   # show only errors
verbosityWarning    = cdefs.verbosityWarning # show errors and warnings
verbosityOutput     = cdefs.verbosityOutput  # and regular output DEFAULT
verbosityDetail     = cdefs.verbosityDetail  # show more details
verbosityDebug      = cdefs.verbosityDebug   # add debugging info (not recommended for casual user)
verbosityDefault    = cdefs.verbosityDefault
from cing.definitions import verbosity

#-----------------------------------------------------------------------------
# System and cing definitions
#-----------------------------------------------------------------------------
from cing.definitions import systemDefinitions
from cing.definitions import cingDefinitions
from cing.definitions import cingPaths
from cing.definitions import directories

#-----------------------------------------------------------------------------
# create tmp directory
#-----------------------------------------------------------------------------
#
if cingDefinitions.tmpdir.exists():
    if cingDefinitions.tmpdir.isdir():
        cingDefinitions.tmpdir.rmdir()
    else:
        cingDefinitions.tmpdir.remove()
#end if
try:
    cingDefinitions.tmpdir.makedirs()
except:
    print("ERROR: Failed to create a temporary directory for %s at: %s" % (cingDefinitions.programName,cingDefinitions.tmpdir) )
    sys.exit(1)

#-----------------------------------------------------------------------------
###### legacy definitions
#-----------------------------------------------------------------------------
#starttime              = systemDefinitions.startTime
#osType                 = systemDefinitions.osType
ncpus                  = systemDefinitions.nCPU # use all if not specified by -c flag to main cing program.
internetConnected      = systemDefinitions.internetConnected # Can be reset later when internet is up again

programName            = cingDefinitions.programName
cingVersion            = cingDefinitions.version
versionStr             = cingDefinitions.getVersionString()
cingRevision           = cingDefinitions.revision
cingRevisionUrl        = cingDefinitions.revisionUrl
issueListUrl           = cingDefinitions.issueUrl
authorList             = cingDefinitions.authors

# This code is repeated in __init__.py and setupCing.py please keep it sync-ed
cingPythonCingDir      = cingDefinitions.codePath  # os.path.split(__file__)[0]
# The path to add to your PYTHONPATH thru the settings script generated by cing.core.setupCing.py
cingPythonDir          = cingDefinitions.codePath[:-1]  # os.path.split(cingPythonCingDir)[0]
# Now a very important variable used through out the code. Even though the
# environment variable CINGROOT is defined the same this is the preferred
# source for the info within the CING python code.
cingRoot               = cingDefinitions.rootPath # os.path.split(cingPythonDir)[0]

cingDirTests           = cingRoot / "Tests"
cingDirMolmolScripts   = cingRoot / "scripts"  / "molmol"
cingDirTestsData       = cingRoot / "data" / "Tests"
cingDirScripts         = cingPythonCingDir / "Scripts"
cingDirLibs            = cingPythonCingDir / "Libs"
cingDirData            = cingRoot / "data"
cingDirTmp             = cingDefinitions.tmpdir

NaNstring              = constants.NaNstring

#-----------------------------------------------------------------------------
###### end legacy definitions
#-----------------------------------------------------------------------------


#---------------------------------------------------------------------------------------------
# Define toplevel CING api
# dont move these to the top as they become circular.
# The order within this list is important too. For one thing, pydev extensions code analysis can't
# track imports well if not correct.
#---------------------------------------------------------------------------------------------

from cing.Libs.NTutils      import *               #TODO: ugly, need to be explicit
from cing.Libs.AwkLike      import AwkLike
from cing.Libs.Adict        import Adict
from cing.Libs              import io

plugins = Adict() # Filled  later-on

from cing.core.classes      import Project
from cing.core.classes      import Peak,              PeakList
from cing.core.classes      import DistanceRestraint, DistanceRestraintList
from cing.core.classes      import DihedralRestraint, DihedralRestraintList
from cing.core.classes      import RDCRestraint,      RDCRestraintList

#---------------------------------------------------------------------------------------------
# functional imports: Order matters!
#---------------------------------------------------------------------------------------------

# Molecule
from cing.core.molecule     import *             #TODO: ugly, need to be explicit

# Plugins
from cing.core.importPlugin import importPlugins
importPlugins()                                  # This imports all plugins

# SML
from cing.core.sml          import obj2sml       # This also initializes the SMLhandler methods
from cing.core.sml          import sml2obj       # This also initializes the SMLhandler methods

# database
from cing.core.database     import NTdb #@Reimport
NTdb._restoreFromSML()                          # This initializes the database

# json handlers
__import__('cing.core.jsonHandlers')
# xml handlers
__import__('cing.core.xmlHandlers')

#---------------------------------------------------------------------------------------------
# convenience
#---------------------------------------------------------------------------------------------
from cing.main import getInfoMessage as gi
from cing.Libs.io import formatDictItems as fd
from cing.core.importPlugin import importPlugin

def openProject(name, status=constants.PROJECT_CREATE):
    """Top level convenience method to load a project
    return Project instance or None on error
    """

    if status == constants.PROJECT_NEW or \
       status == constants.PROJECT_OLD or \
       status == constants.PROJECT_CREATE or \
       status == constants.PROJECT_NEWFROMCCPN or \
       status == constants.PROJECT_OLDFROMCCPN:
        project = Project.open(name, status)
        if project is None:
            io.error('openProject: opening {0} failed\n', name)
        return project
    else:
        io.error('openProject: invalid status {0}\n', status)
    #end if
#end def

