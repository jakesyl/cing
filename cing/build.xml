<?xml version="1.0" encoding="utf-8" ?>
<project name="cing" default="iCing-servlet-install" basedir=".">
    <description>Builds, tests, and runs the project cing.</description>
    <echo>Starting Ant with updated build file</echo>
    <property file="cing.properties" />

    <!-- Added for functionality. Requires a ant-contrib.jar in classpath. -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <target name="init" description="init">
        <!-- Set the below to development 0 or production 1-->
        <property name="isProduction" value="1" />
        <if>
            <equals arg1="${isProduction}" arg2="1" />
            <then>
                <echo message="Now in CING environment for production." />
                <property name="home.web.port" value="${home.web.port.prod}" />
                <property name="home.web.machine" value="${home.web.machine.prod}" />
                <property name="home.web.machine.looped" value="${home.web.machine.looped.prod}" />
            </then>
            <else>
                <echo message="Now in CING environment for development." />
                <property name="home.web.port" value="${home.web.port.dev}" />
                <property name="home.web.machine" value="${home.web.machine.dev}" />
                <property name="home.web.machine.looped" value="${home.web.machine.looped.dev}" />
            </else>
        </if>
        <property name="home.web.url" value="${home.web.machine}/${ant.project.name}" />
        <property name="home.web.usermachine" value="${home.web.user}@${home.web.machine}" />


        <if>
            <not>
                <available file="${build.classes.dir}" />
            </not>
            <then>
                <echo message="Creating the path: ${build.classes.dir}." />
                <mkdir dir="${build.classes.dir}" />
            </then>
        </if>


        <copy verbose="true" file="python/cing/valSets.cfg" todir="war/example" />
        <echo message="Synced configuration file to iCing examples." />

    </target>

    <!--
    <target name="set-version" depends="init">
        <tstamp>
            <format property="cing_version" pattern="yyyyMMdd-HHmm" />
        </tstamp>
        <echo message="Initiating cing version: ${cing_version}" />

        <replaceregexp file="java/src/cing/client/Settings.java" match="String VERSION = (.*)" replace='String VERSION = "${cing_version}";' byline="true" />
        <echo message="Changed Settings.java to reflect new version." />
    </target>
    -->

    <target name="iweb-CING-install" depends="init">
        <echo message="Please insure that the iWeb sites have been compiled first. This ant target can alternatively be done from within iWeb." />
        <echo message="Installing HTML to cing home: ${home.web.user}@${home.web.machine.looped}:${home.web.dir}" />
        <scp todir="${home.web.user}@${home.web.machine.looped}:${home.web.dir}" keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" port="${home.web.port}" verbose="true">
            <fileset dir="${home.web.local.dir}" />
        </scp>
        <!--
        <sync verbose="true"></sync>
        <copydir dest="" src="" ></copydir>
        -->
    </target>


    <target name="iCing-servlet-install" depends="init,war">
        <echo message="Ensure that the tomcat and apache are already setup. As well as the production staging area. Do gwt compile before calling." />
        <echo message="The gwt compile is done from the Eclipse 'GWT compile project' button (red, near the top-left)" />
        <echo message="toDir: ${home.web.user}@${home.web.machine.looped}:${icing.webapp.dir}" />
        <echo message="with port = ${home.web.port} and knownhosts=${home.web.knownhosts} passphrase=${home.web.passphrase} keyfile=${home.web.keyfile} " />
        <scp todir="${home.web.user}@${home.web.machine.looped}:${icing.webapp.dir}"
        	keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" verbose="true" port="${home.web.port}">
            <fileset file="${icing.war.file}" />
        </scp>
    </target>

  <target name="war" description="Create a war file" depends="init">
    <zip destfile="${icing.war.file}" basedir="war"/>
  </target>

</project>
