<?xml version="1.0" encoding="utf-8" ?>
<project name="cing" default="iCing-servlet-install" basedir=".">
    <description>Builds, tests, and runs the project cing.</description>
    <echo>Starting Ant with updated build file</echo>
    <property file="cing.properties" />

    <!-- Added for functionality. Requires a ant-contrib.jar in classpath. -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <target name="init" description="init">
        <!-- Set the below to development 0 or production 1-->
        <property name="isProduction" value="1" />
        <if>
            <equals arg1="${isProduction}" arg2="1" />
            <then>
                <echo message="Now in CING environment for production." />
                <property name="home.web.port" value="${home.web.port.prod}" />
                <property name="home.web.machine" value="${home.web.machine.prod}" />
                <property name="home.web.machine.looped" value="${home.web.machine.looped.prod}" />
            </then>
            <else>
                <echo message="Now in CING environment for development." />
                <property name="home.web.port" value="${home.web.port.dev}" />
                <property name="home.web.machine" value="${home.web.machine.dev}" />
                <property name="home.web.machine.looped" value="${home.web.machine.looped.dev}" />
            </else>
        </if>
        <property name="home.web.url" value="${home.web.machine}/${ant.project.name}" />
        <property name="home.web.usermachine" value="${home.web.user}@${home.web.machine}" />


        <if>
            <not>
                <available file="${build.classes.dir}" />
            </not>
            <then>
                <echo message="Creating the path: ${build.classes.dir}." />
                <mkdir dir="${build.classes.dir}" />
            </then>
        </if>


        <copy verbose="true" file="python/cing/valSets.cfg" todir="java/src/cing/public/example" />
        <echo message="Synced configuration file to iCing examples." />

    </target>

    <!--
    <target name="set-version" depends="init">
        <tstamp>
            <format property="cing_version" pattern="yyyyMMdd-HHmm" />
        </tstamp>
        <echo message="Initiating cing version: ${cing_version}" />

        <replaceregexp file="java/src/cing/client/Settings.java" match="String VERSION = (.*)" replace='String VERSION = "${cing_version}";' byline="true" />
        <echo message="Changed Settings.java to reflect new version." />
    </target>
    -->

    <target name="iweb-CING-install" depends="init">
        <echo message="Please insure that the iWeb sites have been compiled first. This ant target can alternatively be done from within iWeb." />
        <echo message="Installing HTML to cing home: ${home.web.user}@${home.web.machine.looped}:${home.web.dir}" />
        <scp todir="${home.web.user}@${home.web.machine.looped}:${home.web.dir}" keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" port="${home.web.port}" verbose="true">
            <fileset dir="${home.web.local.dir}" />
        </scp>
        <!--
        <sync verbose="true"></sync>
        <copydir dest="" src="" ></copydir>
        -->
    </target>

    <target name="iCing--install" depends="init, iCing-servlet-install, iCing-static-install">
        <echo message="Ensure that the iCing dir already exists remotely." />
    </target>


    <target name="iCing-static-install" depends="init">
        <echo message="Ensure that the iCing dir already exists remotely." />

        <scp todir="${home.web.user}@${home.web.machine.looped}:${server.web.dir}" keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" verbose="true" port="${home.web.port}">
            <fileset dir="${server.web.dir.local}" />
        </scp>
    </target>


    <target name="iCing-servlet-install" depends="init">
        <echo message="Ensure that the tomcat and apache are already setup. As well as the production staging area. Do gwt compile before calling." />

        <copy todir="${icing.production.local.dir}/WEB-INF/classes">
            <fileset dir="java/bin" />
        </copy>
        <!-- The Wattos code changes every now and then so it needs to be included live. Every now and then.-->
        <copy todir="${icing.production.local.dir}/WEB-INF/classes">
            <fileset dir="${WS}/wattos/build" />
        </copy>

        <zip destfile="java/${icing.war.file}">
            <fileset dir="${icing.production.local.dir}" />
        </zip>

        <echo message="toDir: ${home.web.user}@${home.web.machine.looped}:${icing.webapp.dir}" />
        <echo message="with port = ${home.web.port} and knownhosts=${home.web.knownhosts} passphrase=${home.web.passphrase} keyfile=${home.web.keyfile} " />
        <scp todir="${home.web.user}@${home.web.machine.looped}:${icing.webapp.dir}" keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" verbose="true" port="${home.web.port}">
            <fileset file="java/${icing.war.file}" />
        </scp>
    </target>
  <!-- Configure path to GWT SDK -->
  <property name="gwt.sdk" location="/Users/jd/progs/gwt-2.0.0" />

  <path id="project.class.path">
    <pathelement location="war/WEB-INF/classes"/>
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <target name="libs" description="Copy libs to WEB-INF/lib">
    <mkdir dir="war/WEB-INF/lib" />
    <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
    <!-- Add any additional server libs that need to be copied -->
  </target>

  <target name="javac" depends="libs" description="Compile java source">
    <mkdir dir="war/WEB-INF/classes"/>
    <javac srcdir="src" includes="**" encoding="utf-8"
        destdir="war/WEB-INF/classes"
        source="1.5" target="1.5" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
      <classpath refid="project.class.path"/>
    </javac>
    <copy todir="war/WEB-INF/classes">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="gwtc" depends="javac" description="GWT compile to JavaScript">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg value="cing.iCing"/>
    </java>
  </target>

  <target name="devmode" depends="javac" description="Run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <jvmarg value="-Xmx256M"/>
      <arg value="-startupUrl"/>
      <arg value="iCing.html"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg value="cing.iCing"/>
    </java>
  </target>

<!--
Test targets suppressed because -junit argument was not specified when running webAppCreator.

  <target name="javac.tests" depends="javac" description="Compiles test code">
    <javac srcdir="test" includes="**" encoding="utf-8"
      source="1.5" target="1.5" nowarn="true"
      debug="true" debuglevel="lines,vars,source">
      <classpath location="path_to_the_junit_jar"/>
      <classpath refid="project.class.path"/>
    </javac>
  </target>

  <target name="test.dev" depends="javac.tests" description="Run development mode tests">
    <mkdir dir="reports/htmlunit.dev" />
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <jvmarg line="-Xmx256m" />
      <sysproperty key="gwt.args" value="-logLevel WARN" />
      <sysproperty key="java.awt.headless" value="true" />
      <classpath>
        <pathelement location="src" />
        <pathelement location="test" />
        <path refid="project.class.path" />
        <pathelement location="path_to_the_junit_jar" />
      </classpath>
      <batchtest todir="reports/htmlunit.dev" >
        <fileset dir="test" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" />
      <formatter type="xml" />
    </junit>
  </target>

  <target name="test.prod" depends="javac.tests" description="Run production mode tests">
    <mkdir dir="reports/htmlunit.prod" />
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <jvmarg line="-Xmx256m" />
      <sysproperty key="gwt.args" value="-prod -logLevel WARN -out www-test" />
      <sysproperty key="java.awt.headless" value="true" />
      <classpath>
        <pathelement location="src" />
        <pathelement location="test" />
        <path refid="project.class.path" />
        <pathelement location="path_to_the_junit_jar" />
      </classpath>
      <batchtest todir="reports/htmlunit.prod" >
        <fileset dir="test" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" />
      <formatter type="xml" />
    </junit>
  </target>

  <target name="test" description="Run development and production mode tests">
    <antcall target="test.dev" />
    <antcall target="test.prod" />
  </target>
-->

  <target name="hosted" depends="devmode" description="Run development mode (NOTE: the 'hosted' target is deprecated)" />

  <target name="build" depends="gwtc" description="Build this project" />

  <target name="war" depends="build" description="Create a war file">
    <zip destfile="iCing.war" basedir="war"/>
  </target>

  <target name="clean" description="Cleans this project">
    <delete dir="war/WEB-INF/classes" failonerror="false" />
    <delete dir="war/icing" failonerror="false" />
  </target>

</project>
