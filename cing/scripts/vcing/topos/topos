#!/bin/bash
# This is file: $C/scripts/vcing/topos/topos
#echo "DEBUG: now in topos" 
# manual of topos server is at:
# https://docs.google.com/Doc?docid=0AV1_-ddi0ofuZGNtcnZueDNfNzRkcTRoNjV4dw

#######################################################
#
# evert.lammerts@sara.nl
#
# USAGE: ./topos [ command ] [ arguments ]
#
# where the combination command and arguments is one of:
# * uniquePoolName
# * nextToken [POOLNAME]
# * nextTokenWithLock [POOLNAME] [LOCKDURATION]
# * createTokensFromLinesInFile [POOLNAME] [TXTFILE]
# * uploadFileAsToken [POOLNAME] [FILE]
# * uploadFilesInDirAsTokens [POOLNAME] [DIR]
# * refreshLock [POOLNAME] [LOCKNAME] [LOCKDURATION]
# * getToken [POOLNAME] [TOKENNAME]
# * deleteToken [POOLNAME] [TOKENNAME]
#
#######################################################

TOPOS_URL="https://topos.grid.sara.nl/4.1/"
# Disable the silent and fail settings when somethings are ascrew.
# --fail:           Fail silently (no output at all) on server errors.
# --insecure        Perform "insecure" SSL connections
# --tlsv1           (SSL) Forces curl to use TLS version 1 when negotiating with a remote TLS server
#                    This is new since 2012-04-20. It used to work without.
CURL="curl --silent --fail --insecure --tlsv1 --user topos_example:none@none.nl"

EXIT_NOCOMMAND=-1
EXIT_MISSINGPARAM=1
EXIT_FILENOTFOUND=2
EXIT_CURLERROR=3

function uniquePoolName {
  URL=$( ${CURL} --header 'Accept: text/plain' "${TOPOS_URL}newPool" )
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
  URL=( $( echo -n $URL | tr '/' ' ' ) )
  echo -n ${URL[$[ ${#URL[@]}-1 ]]}
}

function createTokensFromLinesInFile {
  local poolName="$1"
  local fileName="$2"
  if [ -z $fileName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ ! -e $fileName ]; then
    exit $EXIT_FILENOTFOUND
  fi
  $CURL --data-binary "@${fileName}" --header 'Content-Type: text/plain; charset="UTF-8"' "${TOPOS_URL}pools/${poolName}/tokens/"
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
}

function uploadFileAsToken {
  local poolName="$1"
  local fileName="$2"
  if [ -z $fileName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ ! -e $fileName ]; then
    exit $EXIT_FILENOTFOUND
  fi
  URL=$( $CURL --upload-file "${fileName}" --header "Content-Disposition: attachment; filename=\"${fileName}\"" --header 'Accept: text/plain' "${TOPOS_URL}pools/${poolName}/nextToken" )
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
  URL=( $( echo -n $URL | tr '/' ' ' ) )
  echo -n ${URL[$[ ${#URL[@]}-1 ]]}
}

function uploadFilesInDirAsTokens {
  local poolName="$1"
  local dirName="$2"
  if [ -z $dirName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ ! -d $dirName ]; then
    exit $EXIT_FILENOTFOUND
  fi
  dirName=$( echo ${dirName} | sed -e "s/\/*$//" )
  local filelist=""
  for f in ${dirName}/*; do
    filelist="${filelist} -F \"file[]=@${f}\""
  done
  $CURL --header 'Accept: text/plain' ${filelist} "${TOPOS_URL}pools/${poolName}/tokens/"
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
}

function nextToken {
  local poolName="$1"
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  TOKEN=$( ${CURL} --header 'Accept: text/plain' "${TOPOS_URL}pools/${poolName}/nextToken" )
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
  echo -n ${TOKEN} | tr '/' ' ' | awk '{print $NF}'
}

function nextTokenWithLock {
#  echo "DEBUG: now in nextTokenWithLock" 
  local poolName="$1"
  local timeout="$2"
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $timeout ]; then
    exit $EXIT_MISSINGPARAM
  fi
  # JFD mods:
  local headerFile="$( mktemp XXXXXX )"
#  echo "DEBUG: using headerFile: $headerFile" 
#  local headerFile="$( mktemp )"
  TOKEN=$( ${CURL} --header 'Accept: text/plain' --dump-header ${headerFile} "${TOPOS_URL}pools/${poolName}/nextToken?timeout=${timeout}" )
  if [ "$?" != "0" ]; then
      # I've seen:
      # curl: (35) error:14077458:SSL routines:SSL23_GET_SERVER_HELLO:reason(1112)
    #	iLvc/cingTmp/ echo $status
    #	35
    exit $EXIT_CURLERROR
  fi
#  echo "JFD TOKEN: ${TOKEN}"
  echo ${TOKEN} | tr '/' ' ' | awk '{print $NF}'
#  echo "JFD headerFile:"
#  cat ${headerFile}

    # JFD mods
#  LOCK=$( grep 'X-Topos-LockURL' <${headerFile} | grep -oP 'http\S+' )
# Just take the last after the split on / anywho.
  LOCK=$( cat ${headerFile} | grep X-Topos-LockURL )
#  echo "JFD LOCK: ${LOCK}"
  echo -n ${LOCK#* } | tr '/' ' ' | awk '{print $NF}'
  rm $headerFile
}

function refreshLock {
  local poolName="$1"
  local lockName="$2"
  local timeout="$3"
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $lockName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $timeout ]; then
    exit $EXIT_MISSINGPARAM
  fi
  ${CURL} --request HEAD "${TOPOS_URL}pools/${poolName}/locks/${lockName}?timeout=${timeout}"
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
}

function deleteLock {
  local poolName="$1"
  local lockName="$2"
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $lockName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  ${CURL} --request DELETE "${TOPOS_URL}pools/${poolName}/locks/${lockName}" > /dev/null
  if [ "$?" != "0" ]; then
    exit $EXIT_CURLERROR
  fi
}

function getToken {
  local poolName="$1"
  local tokenName="$2"
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $tokenName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  ${CURL} --header 'Accept: text/plain' "${TOPOS_URL}pools/${poolName}/tokens/${tokenName}"
}

#function downloadTokenToFile {
#  local poolName="$1"
#  local tokenName="$2"
#  if [ -z $poolName ]; then
#    exit $EXIT_MISSINGPARAM
#  fi
#  if [ -z $tokenName ]; then
#    exit $EXIT_MISSINGPARAM
#  fi
#  local tempFile=$( mktemp )
#  local tempToken=$( mktemp )
#  ${CURL} --dump-header $tempFile -o $tempToken "${TOPOS_URL}pools/${poolName}/tokens/${tokenName}"
#  local fileName=$( cat $tempFile | grep -i -E "filename=\"[^\"]+\"" | awk 'BEGIN { FS = "=" } ; { print $2 }' | sed -e "s/\"//g" -e '{:q;N;s/\n//g;t q}' )
#  fileName=$( [ -n "$fileName" && echo "$fileName" ] || echo "$tokenName" )
#  mv $tempToken $fileName
#  echo $fileName
#}

function deleteToken {
  local poolName="$1"
  local tokenName="$2"
  if [ -z $poolName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  if [ -z $tokenName ]; then
    exit $EXIT_MISSINGPARAM
  fi
  ${CURL} --request DELETE --header 'Accept: text/plain' "${TOPOS_URL}pools/${poolName}/tokens/${tokenName}" > /dev/null
}

COMMAND="$1"
if [ -z $COMMAND ]; then
  exit $EXIT_NOCOMMAND
fi
shift
$COMMAND $1 $2 $3 $4

#uniquePoolName
#nextToken 364cefe6446759007623cc32
#nextTokenWithLock 364cefe6446759007623cc32 120
#createTokensFromLinesInFile 364cefe6446759007623cc32 fractals.c
#refreshLock 364cefe6446759007623cc32 dc16835c-3cbf-11df-9264-001d0911e44a 240
#getToken 364cefe6446759007623cc32 10291138
#deleteToken 364cefe6446759007623cc32 10291137
